data Pair a b where
	Pair :: x: a -> y: b -> Pair a b
 
data List a where
	Nil :: List a
	Cons :: x: a -> xs: List a -> List a

data String


predicate llen ::  List Int -> Int 
predicate pllen :: List (Pair  Int Int) -> Int 

predicate lmem ::  List Int -> Int -> Bool 
predicate lhd ::  List Int ->  Int 
predicate plhd :: List (Pair  Int Int) -> Pair  Int Int 

predicate last  ::  List Int -> Int 
predicate pllast  :: List (Pair  Int Int) -> Pair  Int Int 

predicate ppr1  :: Pair Int Int -> Int 
predicate ppr2  :: Pair Int Int -> Int 


predicate nth ::  List Int -> Int -> Int 
predicate lsnd ::  List Int -> Int 
predicate pen ::  List Int -> Int 


predicate sel ::  List Int -> Int -> Int
  
measure fst :: Pair a b -> a where
  Pair x y -> x
  
measure snd :: Pair a b -> b where
  Pair x y -> y

  
termination measure len :: List a -> {Int | _v >= 0} where
  Nil -> 0
  Cons x xs -> 1 + len xs  

measure elems :: List a -> Set a where
  Nil -> []
  Cons x xs -> [x] + elems xs
  
inline abs x = if x >= 0 then x else -x
	
split :: xs: List a -> {Pair {List a | abs (len xs - len _v * 2) <= 1} (List a) | 
  len xs == len (fst _v) + len (snd _v) && elems xs == elems (fst _v) + elems (snd _v)}


sizez :: n:Int -> {Bool | _v == (n == 0)}
sizegtz :: n:Int -> {Bool | _v == (n > 0)}
subs ::  n1:Int -> n2:Int -> {Int | _v == n1 - n2}
init :: n : Int -> l : List a -> { List a | len _v == n} 

take :: n : Int -> l : List a -> {List a | len _v == n && 
                                            elems _v  == elems l}

	

goal :: n : Int -> z : List a -> {List a | len _v == n - 1}
goal = ??      
           
       